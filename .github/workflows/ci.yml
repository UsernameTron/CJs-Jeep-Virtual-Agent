name: Jeep Specs CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  VIN_API_KEY: test-key  # Default for testing
  DOCKER_REGISTRY: docker.io/jeep-specs  # Default registry

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jeep_specs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jeep_specs_test
      run: |
        pytest tests/ --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        npm run test -- --coverage
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy

    - name: Run Python linting
      working-directory: ./backend
      run: |
        black --check .
        flake8 .
        mypy app/

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        npm ci
        npm run lint
        npm run type-check

  deploy:
    needs: [backend-tests, frontend-tests, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      if: "${{ vars.AWS_ACCESS_KEY_ID != '' }}"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: "${{ vars.AWS_ACCESS_KEY_ID }}"
        aws-secret-access-key: "${{ vars.AWS_SECRET_ACCESS_KEY }}"
        aws-region: us-east-1

    - name: Login to Docker Hub
      if: "${{ vars.DOCKERHUB_USERNAME != '' }}"
      uses: docker/login-action@v2
      with:
        username: "${{ vars.DOCKERHUB_USERNAME }}"
        password: "${{ vars.DOCKERHUB_TOKEN }}"

    - name: Build Docker images
      run: |
        docker build -t jeep-specs-backend ./backend
        docker build -t jeep-specs-frontend ./frontend

    - name: Push Docker images
      if: "${{ vars.DOCKERHUB_USERNAME != '' }}"
      run: |
        docker tag jeep-specs-backend:latest $DOCKER_REGISTRY/jeep-specs-backend:latest
        docker tag jeep-specs-frontend:latest $DOCKER_REGISTRY/jeep-specs-frontend:latest
        docker push $DOCKER_REGISTRY/jeep-specs-backend:latest
        docker push $DOCKER_REGISTRY/jeep-specs-frontend:latest

    - name: Deploy to AWS ECS
      if: "${{ vars.AWS_ACCESS_KEY_ID != '' }}"
      run: |
        aws ecs update-service --cluster jeep-specs --service backend --force-new-deployment
        aws ecs update-service --cluster jeep-specs --service frontend --force-new-deployment

    - name: Log deployment status
      if: always()
      run: |
        echo "Deployment status: ${{ job.status }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}" 